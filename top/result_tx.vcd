$date
	Tue Jul  2 14:22:34 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tx_tb $end
$var wire 5 ! main_fifo_low [4:0] $end
$var wire 5 " main_fifo_high [4:0] $end
$var wire 1 # init $end
$var wire 1 $ clk $end
$var wire 5 % Vco_low [4:0] $end
$var wire 5 & Vco_high [4:0] $end
$var wire 5 ' Vc1_low [4:0] $end
$var wire 5 ( Vc1_high [4:0] $end
$var wire 1 ) RESET_L $end
$var wire 1 * PUSH_MAIN $end
$var wire 1 + POP_D1 $end
$var wire 1 , POP_D0 $end
$var wire 5 - Do_low [4:0] $end
$var wire 5 . Do_high [4:0] $end
$var wire 6 / DATA_OUT_D1 [5:0] $end
$var wire 6 0 DATA_OUT_D0 [5:0] $end
$var wire 6 1 DATA_IN_TX [5:0] $end
$var wire 5 2 D1_low [4:0] $end
$var wire 5 3 D1_high [4:0] $end
$scope module probador $end
$var reg 5 4 D1_high [4:0] $end
$var reg 5 5 D1_low [4:0] $end
$var reg 6 6 DATA_IN_TX [5:0] $end
$var reg 5 7 Do_high [4:0] $end
$var reg 5 8 Do_low [4:0] $end
$var reg 1 , POP_D0 $end
$var reg 1 + POP_D1 $end
$var reg 1 * PUSH_MAIN $end
$var reg 1 ) RESET_L $end
$var reg 5 9 Vc1_high [4:0] $end
$var reg 5 : Vc1_low [4:0] $end
$var reg 5 ; Vco_high [4:0] $end
$var reg 5 < Vco_low [4:0] $end
$var reg 1 $ clk $end
$var reg 1 # init $end
$var reg 5 = main_fifo_high [4:0] $end
$var reg 5 > main_fifo_low [4:0] $end
$upscope $end
$scope module proyecto $end
$var wire 5 ? D1_high [4:0] $end
$var wire 5 @ D1_low [4:0] $end
$var wire 6 A DATA_IN_TX [5:0] $end
$var wire 5 B Do_high [4:0] $end
$var wire 5 C Do_low [4:0] $end
$var wire 1 , POP_D0 $end
$var wire 1 + POP_D1 $end
$var wire 1 * PUSH_MAIN $end
$var wire 1 ) RESET_L $end
$var wire 5 D Vc1_high [4:0] $end
$var wire 5 E Vc1_low [4:0] $end
$var wire 5 F Vco_high [4:0] $end
$var wire 5 G Vco_low [4:0] $end
$var wire 1 $ clk $end
$var wire 1 # init $end
$var wire 5 H main_fifo_high [4:0] $end
$var wire 5 I main_fifo_low [4:0] $end
$var wire 1 J VC1_VALID $end
$var wire 1 K VC1_PAUSE $end
$var wire 5 L VC1_LOW [4:0] $end
$var wire 5 M VC1_HIGH [4:0] $end
$var wire 1 N VC1_FULL $end
$var wire 1 O VC1_ERR $end
$var wire 1 P VC1_EMPTY $end
$var wire 1 Q VC0_VALID $end
$var wire 1 R VC0_PAUSE $end
$var wire 5 S VC0_LOW [4:0] $end
$var wire 5 T VC0_HIGH [4:0] $end
$var wire 1 U VC0_FULL $end
$var wire 1 V VC0_ERR $end
$var wire 1 W VC0_EMPTY $end
$var wire 1 X MAIN_VALID $end
$var wire 1 Y MAIN_PAUSE $end
$var wire 5 Z MAIN_LOW [4:0] $end
$var wire 5 [ MAIN_HIGH [4:0] $end
$var wire 1 \ MAIN_FULL $end
$var wire 1 ] MAIN_ERROR $end
$var wire 1 ^ MAIN_EMPTY $end
$var wire 1 _ FSM_IDLE_OUT $end
$var wire 1 ` FSM_ERROR_OUT $end
$var wire 1 a FSM_ACTIVE_OUT $end
$var wire 6 b DATA_OUT_VC1 [5:0] $end
$var wire 6 c DATA_OUT_VC0 [5:0] $end
$var wire 6 d DATA_OUT_MAIN [5:0] $end
$var wire 6 e DATA_OUT_D1 [5:0] $end
$var wire 6 f DATA_OUT_D0 [5:0] $end
$var wire 1 g D1_VALID $end
$var wire 1 h D1_PAUSE $end
$var wire 5 i D1_LOW [4:0] $end
$var wire 5 j D1_HIGH [4:0] $end
$var wire 1 k D1_FULL $end
$var wire 1 l D1_ERR $end
$var wire 1 m D1_EMPTY $end
$var wire 1 n D0_VALID $end
$var wire 1 o D0_PAUSE $end
$var wire 5 p D0_LOW [4:0] $end
$var wire 5 q D0_HIGH [4:0] $end
$var wire 1 r D0_FULL $end
$var wire 1 s D0_ERR $end
$var wire 1 t D0_EMPTY $end
$var reg 1 u POP_MAIN $end
$var reg 1 v POP_VC0 $end
$var reg 1 w POP_VC1 $end
$var reg 1 x PUSH_D0 $end
$var reg 1 y PUSH_D1 $end
$var reg 1 z PUSH_VC0 $end
$var reg 1 { PUSH_VC1 $end
$var reg 6 | data_to_D0 [5:0] $end
$var reg 6 } data_to_D1 [5:0] $end
$var reg 6 ~ data_to_VC0 [5:0] $end
$var reg 6 !" data_to_VC1 [5:0] $end
$var reg 5 "" fifo_empties [4:0] $end
$var reg 5 #" fifo_errors [4:0] $end
$scope module CONTROL_MACHINE $end
$var wire 5 $" D1_high [4:0] $end
$var wire 5 %" D1_low [4:0] $end
$var wire 5 &" Do_high [4:0] $end
$var wire 5 '" Do_low [4:0] $end
$var wire 5 (" Vc1_high [4:0] $end
$var wire 5 )" Vc1_low [4:0] $end
$var wire 5 *" Vco_high [4:0] $end
$var wire 5 +" Vco_low [4:0] $end
$var wire 1 $ clk $end
$var wire 5 ," empties [4:0] $end
$var wire 5 -" errors [4:0] $end
$var wire 1 # init $end
$var wire 5 ." main_fifo_high [4:0] $end
$var wire 5 /" main_fifo_low [4:0] $end
$var wire 1 ) reset $end
$var reg 1 a active_out $end
$var reg 5 0" d1_h [4:0] $end
$var reg 5 1" d1_l [4:0] $end
$var reg 5 2" do_h [4:0] $end
$var reg 5 3" do_l [4:0] $end
$var reg 1 ` error_out $end
$var reg 1 _ idle_out $end
$var reg 1 4" lol $end
$var reg 5 5" mf_h [4:0] $end
$var reg 5 6" mf_l [4:0] $end
$var reg 5 7" next_state [4:0] $end
$var reg 5 8" state [4:0] $end
$var reg 5 9" vc1_h [4:0] $end
$var reg 5 :" vc1_l [4:0] $end
$var reg 5 ;" vco_h [4:0] $end
$var reg 5 <" vco_l [4:0] $end
$upscope $end
$scope module D0 $end
$var wire 1 ) RESET_L $end
$var wire 5 =" al_empty_in [4:0] $end
$var wire 5 >" al_full_in [4:0] $end
$var wire 1 $ clk $end
$var wire 6 ?" data_in [5:0] $end
$var wire 1 , fifo_rd $end
$var wire 1 x fifo_wr $end
$var wire 1 n valid_out $end
$var wire 1 @" err_mem $end
$var wire 6 A" data_out [5:0] $end
$var reg 1 B" al_empty $end
$var reg 1 C" al_full $end
$var reg 4 D" counter [3:0] $end
$var reg 1 s err_fifo $end
$var reg 1 t fifo_empty $end
$var reg 1 r fifo_full $end
$var reg 1 o pause $end
$var reg 1 E" pause_reg $end
$var reg 1 F" rd $end
$var reg 2 G" rd_ptr [1:0] $end
$var reg 1 H" wr $end
$var reg 2 I" wr_ptr [1:0] $end
$scope module SPACE $end
$var wire 1 ) RESET_L $end
$var wire 2 J" address_read [1:0] $end
$var wire 2 K" address_write [1:0] $end
$var wire 1 $ clk $end
$var wire 6 L" data [5:0] $end
$var wire 1 F" read $end
$var wire 1 H" write $end
$var reg 6 M" data_out [5:0] $end
$var reg 1 @" err $end
$var reg 1 n valid_out $end
$var integer 32 N" i [31:0] $end
$upscope $end
$upscope $end
$scope module D1 $end
$var wire 1 ) RESET_L $end
$var wire 5 O" al_empty_in [4:0] $end
$var wire 5 P" al_full_in [4:0] $end
$var wire 1 $ clk $end
$var wire 6 Q" data_in [5:0] $end
$var wire 1 + fifo_rd $end
$var wire 1 y fifo_wr $end
$var wire 1 g valid_out $end
$var wire 1 R" err_mem $end
$var wire 6 S" data_out [5:0] $end
$var reg 1 T" al_empty $end
$var reg 1 U" al_full $end
$var reg 4 V" counter [3:0] $end
$var reg 1 l err_fifo $end
$var reg 1 m fifo_empty $end
$var reg 1 k fifo_full $end
$var reg 1 h pause $end
$var reg 1 W" pause_reg $end
$var reg 1 X" rd $end
$var reg 2 Y" rd_ptr [1:0] $end
$var reg 1 Z" wr $end
$var reg 2 [" wr_ptr [1:0] $end
$scope module SPACE $end
$var wire 1 ) RESET_L $end
$var wire 2 \" address_read [1:0] $end
$var wire 2 ]" address_write [1:0] $end
$var wire 1 $ clk $end
$var wire 6 ^" data [5:0] $end
$var wire 1 X" read $end
$var wire 1 Z" write $end
$var reg 6 _" data_out [5:0] $end
$var reg 1 R" err $end
$var reg 1 g valid_out $end
$var integer 32 `" i [31:0] $end
$upscope $end
$upscope $end
$scope module MAIN $end
$var wire 1 ) RESET_L $end
$var wire 5 a" al_empty_in [4:0] $end
$var wire 5 b" al_full_in [4:0] $end
$var wire 1 $ clk $end
$var wire 6 c" data_in [5:0] $end
$var wire 1 u fifo_rd $end
$var wire 1 * fifo_wr $end
$var wire 1 X valid_out $end
$var wire 1 d" err_mem $end
$var wire 6 e" data_out [5:0] $end
$var reg 1 f" al_empty $end
$var reg 1 g" al_full $end
$var reg 4 h" counter [3:0] $end
$var reg 1 ] err_fifo $end
$var reg 1 ^ fifo_empty $end
$var reg 1 \ fifo_full $end
$var reg 1 Y pause $end
$var reg 1 i" pause_reg $end
$var reg 1 j" rd $end
$var reg 2 k" rd_ptr [1:0] $end
$var reg 1 l" wr $end
$var reg 2 m" wr_ptr [1:0] $end
$scope module SPACE $end
$var wire 1 ) RESET_L $end
$var wire 2 n" address_read [1:0] $end
$var wire 2 o" address_write [1:0] $end
$var wire 1 $ clk $end
$var wire 6 p" data [5:0] $end
$var wire 1 j" read $end
$var wire 1 l" write $end
$var reg 6 q" data_out [5:0] $end
$var reg 1 d" err $end
$var reg 1 X valid_out $end
$var integer 32 r" i [31:0] $end
$upscope $end
$upscope $end
$scope module VC0 $end
$var wire 1 ) RESET_L $end
$var wire 5 s" al_empty_in [4:0] $end
$var wire 5 t" al_full_in [4:0] $end
$var wire 1 $ clk $end
$var wire 6 u" data_in [5:0] $end
$var wire 1 v fifo_rd $end
$var wire 1 z fifo_wr $end
$var wire 1 Q valid_out $end
$var wire 1 v" err_mem $end
$var wire 6 w" data_out [5:0] $end
$var reg 1 x" al_empty $end
$var reg 1 y" al_full $end
$var reg 16 z" counter [15:0] $end
$var reg 1 V err_fifo $end
$var reg 1 W fifo_empty $end