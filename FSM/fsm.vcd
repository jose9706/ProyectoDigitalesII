$date
	Fri Jun 21 19:46:51 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module fsm_tb $end
$var wire 5 ! vco_l [4:0] $end
$var wire 5 " vco_h [4:0] $end
$var wire 5 # vc1_l [4:0] $end
$var wire 5 $ vc1_h [4:0] $end
$var wire 1 % reset $end
$var wire 5 & mf_l [4:0] $end
$var wire 5 ' mf_h [4:0] $end
$var wire 5 ( main_fifo_low [4:0] $end
$var wire 5 ) main_fifo_high [4:0] $end
$var wire 1 * init $end
$var wire 1 + idle_out $end
$var wire 5 , errors [4:0] $end
$var wire 1 - error_out $end
$var wire 5 . empties [4:0] $end
$var wire 5 / do_l [4:0] $end
$var wire 5 0 do_h [4:0] $end
$var wire 5 1 d1_l [4:0] $end
$var wire 5 2 d1_h [4:0] $end
$var wire 1 3 clk $end
$var wire 1 4 active_out $end
$var wire 5 5 Vco_low [4:0] $end
$var wire 5 6 Vco_high [4:0] $end
$var wire 5 7 Vc1_low [4:0] $end
$var wire 5 8 Vc1_high [4:0] $end
$var wire 5 9 Do_low [4:0] $end
$var wire 5 : Do_high [4:0] $end
$var wire 5 ; D1_low [4:0] $end
$var wire 5 < D1_high [4:0] $end
$scope module master $end
$var reg 5 = D1_high [4:0] $end
$var reg 5 > D1_low [4:0] $end
$var reg 5 ? Do_high [4:0] $end
$var reg 5 @ Do_low [4:0] $end
$var reg 5 A Vc1_high [4:0] $end
$var reg 5 B Vc1_low [4:0] $end
$var reg 5 C Vco_high [4:0] $end
$var reg 5 D Vco_low [4:0] $end
$var reg 1 3 clk $end
$var reg 5 E empties [4:0] $end
$var reg 5 F errors [4:0] $end
$var reg 1 * init $end
$var reg 5 G main_fifo_high [4:0] $end
$var reg 5 H main_fifo_low [4:0] $end
$var reg 1 % reset $end
$upscope $end
$scope module slave $end
$var wire 5 I D1_high [4:0] $end
$var wire 5 J D1_low [4:0] $end
$var wire 5 K Do_high [4:0] $end
$var wire 5 L Do_low [4:0] $end
$var wire 5 M Vc1_high [4:0] $end
$var wire 5 N Vc1_low [4:0] $end
$var wire 5 O Vco_high [4:0] $end
$var wire 5 P Vco_low [4:0] $end
$var wire 1 3 clk $end
$var wire 5 Q empties [4:0] $end
$var wire 5 R errors [4:0] $end
$var wire 1 * init $end
$var wire 5 S main_fifo_high [4:0] $end
$var wire 5 T main_fifo_low [4:0] $end
$var wire 1 % reset $end
$var reg 1 4 active_out $end
$var reg 5 U d1_h [4:0] $end
$var reg 5 V d1_l [4:0] $end
$var reg 5 W do_h [4:0] $end
$var reg 5 X do_l [4:0] $end
$var reg 1 - error_out $end
$var reg 1 + idle_out $end
$var reg 1 Y lol $end
$var reg 5 Z mf_h [4:0] $end
$var reg 5 [ mf_l [4:0] $end
$var reg 5 \ next_state [4:0] $end
$var reg 5 ] state [4:0] $end
$var reg 5 ^ vc1_h [4:0] $end
$var reg 5 _ vc1_l [4:0] $end
$var reg 5 ` vco_h [4:0] $end
$var reg 5 a vco_l [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx a
bx `
bx _
bx ^
bx ]
b1 \
bx [
bx Z
xY
bx X
bx W
bx V
bx U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
03
bx 2
bx 1
bx 0
bx /
b0 .
0-
b0 ,
0+
0*
b0 )
b0 (
bx '
bx &
0%
bx $
bx #
bx "
bx !
$end
#2
b10 \
0Y
b1 ]
1%
13
#4
03
#6
b100 \
b1101 ;
b1101 >
b1101 J
b1100 9
b1100 @
b1100 L
b1011 5
b1011 D
b1011 P
b1010 7
b1010 B
b1010 N
b11 (
b11 H
b11 T
b0 &
b0 [
b0 '
b0 Z
b0 !
b0 a
b0 "
b0 `
b0 #
b0 _
b0 $
b0 ^
b0 /
b0 X
b0 0
b0 W
b0 1
b0 V
b0 2
b0 U
b10 ]
13
#8
03
#10
1+
b1101 1
b1101 V
b1100 /
b1100 X
b1010 #
b1010 _
b1011 !
b1011 a
b11 &
b11 [
b100 ]
b1010 <
b1010 =
b1010 I
b1001 :
b1001 ?
b1001 K
b1000 6
b1000 C
b1000 O
b111 8
b111 A
b111 M
b110 )
b110 G
b110 S
13
#12
03
#14
13
#16
03
#18
b1000 \
0+
b1 .
b1 E
b1 Q
13
#20
03
#22
14
b0 (
b0 H
b0 T
b0 )
b0 G
b0 S
b0 5
b0 D
b0 P
b0 6
b0 C
b0 O
b0 7
b0 B
b0 N
b0 8
b0 A
b0 M
b0 9
b0 @
b0 L
b0 :
b0 ?
b0 K
b0 ;
b0 >
b0 J
b0 <
b0 =
b0 I
b1000 ]
13
#24
03
#26
b10000 \
04
b1 ,
b1 F
b1 R
13
#28
03
#30
1-
b10000 ]
13
#32
03
#34
b1 \
0-
0%
13
#36
03
#38
b10 \
1%
b1 ]
13
#40
03
#42
b100 \
b0 &
b0 [
b0 !
b0 a
b0 #
b0 _
b0 /
b0 X
b0 1
b0 V
b10 ]
13
#44
03
#46
b1000 \
b100 ]
13
#48
03
#50
b10000 \
b1000 ]
13
